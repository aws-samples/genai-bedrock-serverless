Transform: AWS::Serverless-2016-10-31
Description: "Agents for Bedrock Informatica IDMC Agent orchestration"

Outputs:
  IDMCBucketArn:
    Value: !GetAtt IDMCBucket.Arn
  BusinessAppsBucketArn:
    Value: !GetAtt BusinessAppsBucket.Arn
  Region:
    Description: Deployed Region
    Value: !Ref AWS::Region

Resources:
  IDMCLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: idmc.lambda_handler
      Runtime: python3.9
      Timeout: 720
      Role: !GetAtt 'IDMCLambdaExecutionRole.Arn'
      CodeUri: ./src/
      MemorySize: 1280
      ReservedConcurrentExecutions: 100
      EphemeralStorage:
        Size: 5120

  AmazonBedrockExecutionRoleForAgents:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: bedrock.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      RoleName: 'AmazonBedrockExecutionRoleForAgents_IDMC'
  
  
  IDMCLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      

  ResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'IDMCLambda.Arn'
      Principal: bedrock.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
 
  LambdaLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: arn:aws:lambda:ap-southeast-1:113088814899:layer:Klayers-p39-packaging:1
      Principal: *

  IDMCBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "s3-idmc-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: testing-logs
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
  LoggingBucket:
    Type: 'AWS::S3::Bucket'

  LoggingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref LoggingBucket
                - /*
            Condition:
              ArnLike:
                'aws:SourceArn': !GetAtt 
                  - IDMCBucket
                  - Arn
              StringEquals:
                'aws:SourceAccount': !Sub '${AWS::AccountId}'

  IDMCBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      PolicyDocument:
        Id: EnforceHttpsPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: EnforceHttpsSid
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${IDMCBucket}/*"
              - !Sub "arn:aws:s3:::${IDMCBucket}"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
      Bucket: !Ref IDMCBucket
      
  BusinessAppsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "s3-businessapps-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
  BusinessAppsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      PolicyDocument:
        Id: EnforceHttpsPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: EnforceHttpsSid
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${BusinessAppsBucket}/*"
              - !Sub "arn:aws:s3:::${BusinessAppsBucket}"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
      Bucket: !Ref BusinessAppsBucket